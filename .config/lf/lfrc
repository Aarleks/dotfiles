# vim: ft=cfg

# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set '-eu' options for shell commands
# Option '-e' is used to exit on error and option '-u' is used to give error for unset variables.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
set ifs "\n"

# previewer file from Luke Smith https://github.com/LukeSmithxyz/voidrice/blob/voiddwm/.config/lf/lfrc
set previewer ~/.local/bin/lfpreview

# leave some space at the top and the bottom of the screen
set scrolloff 10

set hidden
set incsearch
#set color256

# COMMANDS AND FUNCTIONS


# define a custom 'open' command
cmd open ${{
    case $(file --mime-type $f -b) in
        text/troff) man ./ $f;;
        text/*) $EDITOR $fx;;
	application/vnd*) setsid onlyoffice-desktopeditors $f >/dev/null 2>&1 & ;;
        image/x-xcf|image/svg+xml) setsid gimp $f >/dev/null 2>&1 & ;;
        image/*) rotdir $f | setsid sxiv -ai >/dev/null 2>&1 & ;;
        audio/*) mpv --input-ipc-server=/tmp/mpvsoc$(date +%%s) $f ;;
        video/*) setsid mpv --input-ipc-server=/tmp/mpvsoc$(date +%%s) $f -quiet >/dev/null 2>&1 & ;;
        application/pdf) setsid zathura $fx >/dev/null 2>&1 & ;;
        *) for f in $fx; do setsid $OPENER $f >/dev/null 2>&1 & done;;
    esac
}}

# rename current file without overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

# define a custom 'delete' command
cmd delete ${{
    set -f
    printf "%s\n\t" "$fx"
    printf "delete?[y/n]"
    read ans
    [ $ans = "y" ] && rm -rf $fx
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

map Z extract

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

map c zip

cmd bulk ${{
    set -f
    echo $fx | sed 's/ /\n/g' | tee ~/.cache/bulkold > ~/.cache/bulknew
    nvim ~/.cache/bulknew && ~/.local/bin/bulk

{{

cmd moveto ${{
	set -f
	clear; echo "Move to where?"
	dest="$(cut -d'	' -f2- ~/.config/alias-dirs | fzf)" &&
	eval mv -iv $fx $dest &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

# MAPPINGS

map r push :rename<space>
map <enter> shell
map D delete
map x $$f
map X !$f
map R reload
map M moveto

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

source "~/.config/lf/lfshortcuts"
